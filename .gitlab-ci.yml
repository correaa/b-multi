# -*-indent-tabs-mode:nil;c-basic-offset:2;tab-width:4;-*-
# This file is a template, and might need editing before it works on your project.
#image: golang:latest

#variables:
#  # Please edit to your GitLab project
#  REPO_NAME: gitlab.com/namespace/project

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
#before_script:
#  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
#  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
#  - cd $GOPATH/src/$REPO_NAME
#    - apt upgrade -y --quiet
# nvidia-cuda-dev  nvidia-smi
#      - sh ./array_ptr.cpp
#      - sh ./array_ref.cpp
#      - sh ./sort.cpp
#      - sh ./comparisons.cpp
#      - sh ./constructors.cpp
#      - sh ./initializer_list.cpp
#      - sh ./layout.cpp
#      - sh ./fill.cpp
#      - sh ./rotated.cpp
#      - sh ./allocator.cpp
#      - sh ./reextent.cpp

#      - DEBIAN_FRONTEND=noninteractive apt install --assume-yes  build-essential 
#      - DEBIAN_FRONTEND=noninteractive apt-get update
#      - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --assume-yes --quiet g++-7

image: debian:testing
#debian:stable-backports

variables:
  CXX: "c++"
  DOCKER_DRIVER: overlay2

#before_script:

stages:
    - test
#    - build

gcc:
    stage: test
    script:
      - perl -pi -e 's/main/main\ contrib\ non-free/g' /etc/apt/sources.list
      - apt update --quiet
      - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --assume-yes --quiet libboost-test-dev
      - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --assume-yes --quiet g++
      - ln --symbolic --force . ../multi
      - export CXX="g++     -x c++  -Wall -Wextra -Wpedantic -Werror -Ofast -pthread "
      - $CXX --version
      - cd test
      - for a in ./*.cpp; do echo $a; sh $a || exit; echo "\n"; done;

gcc8:
    stage: test
    script:
      - perl -pi -e 's/main/main\ contrib\ non-free/g' /etc/apt/sources.list
      - apt update --quiet
      - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --assume-yes --quiet libboost-test-dev
      - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --assume-yes --quiet g++-8
      - ln --symbolic --force . ../multi
      - export CXX="g++-8     -x c++  -Wall -Wextra -Wpedantic -Werror -Ofast -pthread "
      - $CXX --version
      - cd test
      - for a in ./*.cpp; do echo $a; sh $a || exit; echo "\n"; done;

clang:
    stage: test
    script:
      - perl -pi -e 's/main/main\ contrib\ non-free/g' /etc/apt/sources.list
      - apt update --quiet
      - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --assume-yes --quiet libboost-test-dev
      - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --assume-yes --quiet clang
      - ln --symbolic --force . ../multi
      - export CXX="clang++ -x c++ -Wall -Wextra -Wpedantic -Werror -Wmove -O3 -pthread"
      - $CXX --version
      - cd test
      - for a in ./*.cpp; do echo $a; sh $a || exit; echo "\n"; done;

clangX:
    stage: test
    script:
      - perl -pi -e 's/main/main\ contrib\ non-free/g' /etc/apt/sources.list
      - apt update --quiet
      - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --assume-yes --quiet libboost-test-dev
      - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --assume-yes --quiet clang-10
      - ln --symbolic --force . ../multi
      - export CXX="clang++-10 -x c++ -Wall -Wextra -Wpedantic -Werror -Wmove -Ofast -pthread"
      - $CXX --version
      - cd test
      - for a in ./*.cpp; do echo $a; sh $a || exit; echo "\n"; done;

clangX-17:
    stage: test
    script:
      - perl -pi -e 's/main/main\ contrib\ non-free/g' /etc/apt/sources.list
      - apt update --quiet
      - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --assume-yes --quiet libboost-test-dev
      - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --assume-yes --quiet clang-10
      - ln --symbolic --force . ../multi
      - export CXX="clang++-10 -std=c++17 -x c++ -Wall -Wextra -Wpedantic -Werror -Wmove -Ofast -pthread"
      - $CXX --version
      - cd test
      - for a in ./*.cpp; do echo $a; sh $a || exit; echo "\n"; done;

clang-asan:
    stage: test
    script:
      - perl -pi -e 's/main/main\ contrib\ non-free/g' /etc/apt/sources.list
      - apt update --quiet
      - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --assume-yes --quiet libboost-test-dev
      - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --assume-yes --quiet clang
      - ln --symbolic --force . ../multi
      - export CXX="clang++ -fsanitize=undefined -fsanitize=address -g -x c++ -Wall -Wextra -Wpedantic -Werror -Wmove -O3 -pthread"
      - $CXX --version
      - cd test
      - for a in ./*.cpp; do echo $a; sh $a || exit 1; echo "\n"; done;

#clang-msan: # not working with Boost.Test
#    stage: test
#    script:
#      - perl -pi -e 's/main/main\ contrib\ non-free/g' /etc/apt/sources.list
#      - apt update --quiet
#      - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --assume-yes --quiet libboost-test-dev
#      - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --assume-yes --quiet clang
#      - ln --symbolic --force . ../multi
#      - export CXX="clang++ -fsanitize=undefined -fsanitize=memory -g -x c++ -Wall -Wextra -Wpedantic -Werror -Wmove -O3 -pthread"
#      - $CXX --version
#      - cd test
#      - for a in ./*.cpp; do echo $a; sh $a || exit 1; echo "\n"; done;

nvcc:
    image: nvidia/cuda:11.0-devel-ubuntu20.04
    #debian:stable-backports
    stage: test
    script:
#      - perl -pi -e 's/main/main\ contrib\ non-free/g' /etc/apt/sources.list
      - apt update --quiet
      - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --assume-yes --quiet libboost-test-dev
#      - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --assume-yes --quiet g++ nvidia-cuda-toolkit 
      - ln --symbolic --force . ../multi
      - export CXX="nvcc -std=c++14 -use_fast_math -lpthread -D_REENTRANT -DBOOST_PP_VARIADICS=1 --expt-relaxed-constexpr -DBOOST_PP_VARIADICS=1 -x cu --compiler-options=-std=c++14,-Wall,-Wextra,-O3"
      - $CXX --version
      - g++ --version
      - cd test
      - mkdir build
      - cd build
      - cmake ..
      - make -j
      - ctest --output-on-failure
      - for a in ./*.cpp; do echo $a; sh $a || exit; echo "\n"; done;

icpc:
    stage: test
    tags:
      - intel_compiler
    script:
      - export PATH=/usr/local/cuda/bin:$PATH
      - . /opt/intel/system_studio_2020/bin/compilervars.sh intel64 
      - export CXX="icpc -fopenmp -std=c++14 -diag-disable=remark -x c++ -Wall -Wextra  -Wall -Wextra -Warray-bounds -Wchar-subscripts -Wcomment -Wenum-compare -Wformat -Wuninitialized -Wmaybe-uninitialized -Wmain -Wnarrowing -Wnonnull -Wparentheses -Wpointer-sign -Wreorder -Wreturn-type -Wsign-compare -Wsequence-point -Wtrigraphs -Wunused-function -Wunused-but-set-variable -Wunused-variable -Wwrite-strings -Werror -diag-error:3846 -Ofast -ldl -pthread "
      - $CXX --version
      - cd test
      - for a in ./*.cpp; do echo $a; sh $a || exit; echo "\n"; done;

cmake:
    stage: test
    script:
      - perl -pi -e 's/main/main\ contrib\ non-free/g' /etc/apt/sources.list
      - apt update --quiet
      - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --assume-yes --quiet libboost-test-dev
      - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --assume-yes --quiet clang cmake make
      - ln --symbolic --force . ../multi
      - export CXX="clang++"
      - $CXX --version
      - cd test
      - mkdir build
      - cd build
      - cmake ..
      - make -j
      - ctest --output-on-failure

cmake-valgrind:
    stage: test
    script:
      - perl -pi -e 's/main/main\ contrib\ non-free/g' /etc/apt/sources.list
      - apt update --quiet
      - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --assume-yes --quiet libboost-test-dev
      - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --assume-yes --quiet g++ cmake make valgrind
      - ln --symbolic --force . ../multi
      - export CXX="c++ -g "
      - export VALGRIND="valgrind"
      - $CXX --version
      - cd test
      - mkdir build
      - cd build
      - cmake ..
      - make -j
      - ctest --output-on-failure

#      - export CXX="clang++     -x c++  -Wall -Wextra -Wpedantic -Ofast -lcudart -lfftw3 -lcublas -lcufft -lboost_timer -lboost_unit_test_framework `pkg-config --libs blas` "

blas&fft:
    stage: test
    script:
      - perl -pi -e 's/main/main\ contrib\ non-free/g' /etc/apt/sources.list
      - apt update --quiet
      - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --assume-yes --quiet libboost-test-dev libboost-timer-dev libtbb-dev libboost-serialization-dev libboost-iostreams-dev librange-v3-dev valgrind
      - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --assume-yes --quiet clang pkg-config libblas-dev libblas64-dev libfftw3-dev nvidia-cuda-toolkit
      - ln --symbolic --force . ../multi
      - export CXXX="clang++ -x c++"
      - export CXXFLAGS="-Wall -Wextra -Wpedantic -O3 -lcudart -lfftw3 -lcublas -lcufft -lboost_timer -lboost_unit_test_framework `pkg-config --libs blas`"
      - export CXX="${CXXX} ${CXXFLAGS}"
      - $CXX --version
      - cd adaptors/blas
      - for a in ./*.hpp; do echo $a; $CXX $a || exit; done;
      - cd tests
      - for a in ./*.cpp; do echo $a; $CXX $a || exit; done;
      - cd ..
      - cd ../..
      - cd adaptors
      - sh ./fftw.hpp
      - $CXX fft.hpp

#      - DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --assume-yes --quiet clang pkg-config libblas-dev libblas64-dev libfftw3-dev nvidia-cuda-toolkit
#      - ln --symbolic --force . ../multi 

blas&fftGPU-11:
    stage: build
    tags:
      - cuda_gpu
    stage: test
    script:
      - export PATH=/usr/local/cuda-11.0/bin:$PATH #export PATH=/usr/local/cuda/bin:$PATH
      - export LD_LIBRARY_PATH=/usr/local/cuda-11.0/lib64:$LD_LIBRARY_PATH
      - export CXXX="clang++ -x c++"
      - export CXXFLAGS="`#-Wall -Wextra -Wpedantic` -Ofast -Wl,-rpath=/usr/local/cuda/lib64 -L/usr/local/cuda-11.0/lib64 -I/usr/local/cuda-11.0/include -lcudart -lfftw3 -lcublas -lcufft -lboost_timer -lboost_unit_test_framework `pkg-config --libs blas` "
      - export CXX="${CXXX} ${CXXFLAGS}"
      - $CXX --version
      - cd adaptors/blas
      - for a in ./*.hpp; do echo $a; sh $a || exit; echo "\n"; done;
      - cd tests
      - for a in ./*.cpp; do echo $a; sh $a || exit; echo "\n"; done;
      - cd ..
      - cd ../..
      - cd adaptors
      - sh ./fftw.hpp
      - sh ./fft.hpp

blas&fftGPU:
    stage: build
    tags:
      - cuda_gpu
    stage: test
    script:
      - export PATH=/usr/local/cuda/bin:$PATH #export PATH=/usr/local/cuda/bin:$PATH
      - export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
      - export CXXX="clang++ -x c++"
      - export CXXFLAGS="`#-Wall -Wextra -Wpedantic` -Ofast -Wl,-rpath=/usr/local/cuda/lib64 -L/usr/local/cuda/lib64 -I/usr/local/cuda/include -lcudart -lfftw3 -lcublas -lcufft -lboost_timer -lboost_unit_test_framework `pkg-config --libs blas` "
      - export CXX="${CXXX} ${CXXFLAGS}"
      - $CXX --version
      - cd adaptors/blas
      - for a in ./*.hpp; do echo $a; sh $a || exit; echo "\n"; done;
      - cd tests
      - for a in ./*.cpp; do echo $a; sh $a || exit; echo "\n"; done;
      - cd ..
      - cd ../..
      - cd adaptors
      - sh ./fftw.hpp
      - sh ./fft.hpp

